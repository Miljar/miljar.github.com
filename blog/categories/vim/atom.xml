<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Miljar - Tom Van Herreweghe]]></title>
  <link href="http://miljar.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://miljar.github.io/"/>
  <updated>2013-11-22T07:57:03+00:00</updated>
  <id>http://miljar.github.io/</id>
  <author>
    <name><![CDATA[Tom Van Herreweghe]]></name>
    <email><![CDATA[tom@theanalogguy.be]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VIM for IDE-people - part 4]]></title>
    <link href="http://miljar.github.io/blog/2013/11/19/vim-for-ide-people-part-4/"/>
    <updated>2013-11-19T17:36:00+00:00</updated>
    <id>http://miljar.github.io/blog/2013/11/19/vim-for-ide-people-part-4</id>
    <content type="html"><![CDATA[<h1>Syntax checking: Syntastic</h1>

<h2>It&rsquo;s built-in dummy!</h2>

<p>A nice thing about an IDE is that it offers visual clues when editing source code files. It&rsquo;s quite hard to not notice a syntax error in an IDE. The astute Vim adept will immediately tell you syntax highlighting is built-in into Vim. No need for a plugin. And he&rsquo;s right, Vim comes with a built-in <a href="http://vimdoc.sourceforge.net/htmldoc/syntax.html">syntax highlighter</a> and even <a href="http://vimdoc.sourceforge.net/htmldoc/filetype.html">indentation control</a>. You can enable those by adding the following settings to your <code>~/.vimrc</code> file:</p>

<p>``` vim
&ldquo; Takes care of highlight
filetype plugin on
syntax on</p>

<p>&ldquo; Takes care of indentation
filetype indent on
```</p>

<h2>More on indentation</h2>

<p>Indentation can be controlled very granuallary. Here&rsquo;s an overview of the most commonly used settings:</p>

<p>``` vim
&ldquo; Set an indent to 4 columns
set tabstop=4</p>

<p>&ldquo; When reindenting, each indentation is 4 columns
set shiftwidth=4</p>

<p>&ldquo; Don&rsquo;t replace an indentation by 4 spaces
set noexpandtab</p>

<p>&ldquo; Do replace an indentation by 4 spaces
"set expandtab</p>

<p>&ldquo; Use 4 spaces when hitting Tab in insert mode
set softtabstop=4
```</p>

<p>If you want more information on indentation and how to control it, I recommend reading <a href="http://tedlogan.com/techblog3.html">Secrets of tabs in Vim</a>.</p>

<h2>Syntastic</h2>

<p>What we&rsquo;re after is true language specific syntax checking. For this, we do need a plugin. Enter <a href="https://github.com/scrooloose/syntastic">Syntastic</a>, created by Martin Grenfell, author of <a href="https://github.com/scrooloose/nerdtree">NERDTree</a>. What it does, is running your files through external syntax checkers. It then returns those errors and displays them to you. There are syntax checking plugins for a whole bunch of programming languages. Most important for me, is PHP support.</p>

<p><img class="center" src="/images/2013-11-19/syntastic_1.png" title="Syntastic output" ></p>

<p>When you write a file and it has syntax errors in it, Syntastic notifies you in a couple of ways:</p>

<ol>
<li>A mark next to the line where your syntax error is.</li>
<li>When hovering over that marker or line, a balloon with the error messages comes up.</li>
<li>A notification in the status bar. (Never mind that fancy status bar in the screenshot, I&rsquo;ll talk about it some other time.)</li>
</ol>


<h3>Installation</h3>

<p>Quite easy with pathogen:</p>

<pre><code>cd ~/.vim/bundle
git clone https://github.com/scrooloose/syntastic.git
</code></pre>

<p>Restart Vim and you&rsquo;re all set.</p>

<h3>Configuration</h3>

<p>I&rsquo;m sorry, everything works out-of-the-box. So there&rsquo;s no configuration necessary.</p>

<h3>PHP Checkers</h3>

<p>I&rsquo;m a PHP guy, and code quality is important to me. Luckily, Syntastic can assist me. There is support for tools like <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHPCS</a> and <a href="http://phpmd.org/">PHPMD</a>. To add these to Syntastic, add this to your <code>~/.vimrc</code> configuration file:</p>

<p><code>vim
let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']
</code></p>

<p>Syntastic will first use php lint. If no errors were found, the file is checked with PHPCS for coding standards fails. If there still are no errors, it uses PHPMD for mess detection. If you need help setting up these extra checkers, see <code>:help syntastic-checker-options</code>. Basically, you can override all the arguments for each checker by specifying the arguments in this standardized way: <code>let g:syntastic_&lt;filetype&gt;_&lt;subchecker&gt;_args="&lt;cli args&gt;"</code>. Very neat to specify e.g. the coding standards you want your file to adhere to.</p>

<h2>Final words</h2>

<p>Syntastic comes well configured out-of-the-box. That&rsquo;s what makes it so easy to use. Once it&rsquo;s installed, you can just forget about it. If for some reason, you need a checker that&rsquo;s not available, it should be fairly easy to create your own. Even without much of VimL knowledge. Just read the <a href="https://github.com/scrooloose/syntastic/wiki/Syntax-Checker-Guide">project wiki</a> and write your missing checker. Don&rsquo;t forget to share it with the rest of use, right?</p>

<p><strong>Update 22/11/2013</strong> &ndash; Corrected some factual errors; Added indentation stuff.</p>

<p><!-- more -->
# Vim For IDE-people

This article is part of the series "Vim For IDE-people". The other articles in the list are:

1. [Basic Vim configuration and plugins](http://miljar.github.io/blog/2013/09/18/vim-for-ide-people-part-1/)
2. [Solarized color scheme](http://miljar.github.io/blog/2013/09/24/vim-for-ide-people-part-2/)
3. [File system explorer: NERDTree](http://miljar.github.io/blog/2013/11/08/vim-for-ide-people-part-3/)
4. [Syntax checking: Syntastic](http://miljar.github.io/blog/2013/11/19/vim-for-ide-people-part-4/)

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM for IDE-people - part 3]]></title>
    <link href="http://miljar.github.io/blog/2013/11/08/vim-for-ide-people-part-3/"/>
    <updated>2013-11-08T16:40:00+00:00</updated>
    <id>http://miljar.github.io/blog/2013/11/08/vim-for-ide-people-part-3</id>
    <content type="html"><![CDATA[<h1>File system explorer: NERDTree</h1>

<p>When working with an IDE, you usually have a way of browsing your local filesystem to choose a file to edit. There&rsquo;s not such standard functionality built-in into Vim. Luckily there&rsquo;s <a href="https://github.com/scrooloose/nerdtree">The NERD Tree</a>.</p>

<p>NERDTree allows you to browse your file system, open files an directories, and allows simple file operations like creating files/directories, moving them, deleting them, copying them. Everything is presented the way you&rsquo;re used to: a tree. Hence the name.</p>

<h2>Installation</h2>

<p>Installation is quite easy with <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>, which we installed in <a href="http://miljar.github.io/blog/2013/09/18/vim-for-ide-people-part-1/">Part 1</a>:</p>

<pre><code>cd ~/.vim/bundle
git clone https://github.com/scrooloose/nerdtree.git
</code></pre>

<p>Then reload Vim, and NERDTree is available. Display the NERDTree with <code>:NERDTree</code>. This will show you a tree of your filesystem, starting from your current working directory.</p>

<p><img class="center" src="/images/2013-11-08/nerdtree_example.png" title="NERDTree example" ></p>

<h2>Basic commands</h2>

<p>When the NERDTree window is active, you can find all available commands by pressing <code>?</code>. This displays the help. Close the help by pressing <code>?</code> again. Below is an overview of commands I&rsquo;m currently using most:</p>

<h3>Opening/Closing NERDTree</h3>

<p>Just opening NERDTree with the current working directory as root, type <code>:NERDTree</code>.</p>

<p>If you want to open NERDTree with a specific folder as root, type <code>:NERDTree /path/to/folder</code>.</p>

<p>Working with a big screen gives you the option to always have NERDTree open. When your screen real estate is smaller, you can toggle the NERDTree window with <code>:NERDTreeToggle</code>. If you know how to bind a command to a specific key combination, then you can easily switch NERDTree on or off.</p>

<h3>Navigation</h3>

<p>You can use the regular <a href="http://vim.wikia.com/wiki/Moving_around">Vim navigation keys</a> to move around in the tree. With me not being used to the Vim navigation keys, I tend to use the arrow keys. Yes, I know&hellip;</p>

<h3>Folders</h3>

<p>Folders are marked with a triangle in front of them. To open a folder, move to the corresponding line, and press <code>enter</code>. Closing a folder is the same key.</p>

<p>When your cursor is on a file in a folder and you press <code>x</code>, the parent folder closes, placing your cursor on the line of the folder. Repeating <code>x</code> then closes the folder&rsquo;s parent, and so on.</p>

<p>If your cursor is on a folder, and you want to close all subfolders recursively, hit <code>X</code> (capital x).</p>

<h3>Files</h3>

<p>After browsing your filesystem, the next thing you&rsquo;re probably going to is edit a file. To open a file in the last active window, navigate to the correspondig line in the NERDTree panel, and hit <code>enter</code>.</p>

<p>Want to open the file in a new vertical split window? Hit <code>s</code>.</p>

<p>If you&rsquo;re more of a horizontal split kind of person, hit <code>i</code> to open the file in a new horizontal split.</p>

<p>And finally, if you prefer opening the file in a new tab, hit <code>t</code>.</p>

<p>Using one of these methods above will open the file in your prefered split/tab, and immediately focus in the new split or tab. If you want to just open the file, but keep on navigating your filesystem, you can prefix the split commands with <code>g</code>: <code>gs</code>, <code>gi</code>. This is called a &ldquo;preview split&rdquo;. You can do the same with tabs, but then you&rsquo;d hit <code>T</code>.</p>

<h3>Filesystem manipulations</h3>

<p>With the NERDTree window active, press <code>m</code>. A menu appears with a list of manipulations available, such as creating a file/folder, moving a file/folder, &hellip;</p>

<p>The most important thing to remember is: When you&rsquo;re creating a folder (<code>m</code> followed by <code>a</code>), don&rsquo;t forget to add a trailing / to the folder name. If you forget, a file with that name will be created instead of a folder.</p>

<p><img class="center" src="/images/2013-11-08/nerdtree_menu.png" title="NERDTree menu" ></p>

<h2>Bookmarks</h2>

<p>One of the features I like most, is the ability to create bookmarks in your filesystem. A bookmark simply allows you to create a tag for a specific location in NERDTree. Once you have created a bookmark, you can use <code>:NERDTree &lt;bookmark&gt;</code> to have the tree open at this specific location.</p>

<p><em>Creating a bookmark</em>: Put your cursor on the file or folder you want to bookmark, and type <code>:Bookmark &lt;your bookmark name&gt;</code></p>

<p><em>Toggle the bookmark table</em>: <code>B</code></p>

<p><img class="center" src="/images/2013-11-08/nerdtree_bookmarks.png" title="NERDTree bookmark table" ></p>

<p><em>Delete bookmark</em>: Go to the corresponding line in the bookmark table and hit <code>D</code>.</p>

<h2>Final words</h2>

<p>NERDTree makes it very easy to browse your filesystem. It should be one of the first plugins you install. Especiall if you come from an IDE, like me, it makes sense to have something available that you know from your IDE world.</p>

<p>One last tip before closing this post: If you&rsquo;re tired of having to toggle NERDTree each time you fire up Vim, you can have it auto-opened for you. Just put the following in your <code>~/.vimrc</code>, reload Vim, and it&rsquo;s there! Beware: it can be annoying if you open Vim in the terminal. Mostly you&rsquo;re just editing one file, so then the NERDTree window is a bit useless.</p>

<p><code>vim
au VimEnter *  NERDTree
</code></p>

<p><!-- more -->
# Vim For IDE-people

This article is part of the series "Vim For IDE-people". The other articles in the list are:

1. [Basic Vim configuration and plugins](http://miljar.github.io/blog/2013/09/18/vim-for-ide-people-part-1/)
2. [Solarized color scheme](http://miljar.github.io/blog/2013/09/24/vim-for-ide-people-part-2/)
3. [File system explorer: NERDTree](http://miljar.github.io/blog/2013/11/08/vim-for-ide-people-part-3/)
4. [Syntax checking: Syntastic](http://miljar.github.io/blog/2013/11/19/vim-for-ide-people-part-4/)

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM for IDE-people - part 2]]></title>
    <link href="http://miljar.github.io/blog/2013/09/24/vim-for-ide-people-part-2/"/>
    <updated>2013-09-24T16:25:00+00:00</updated>
    <id>http://miljar.github.io/blog/2013/09/24/vim-for-ide-people-part-2</id>
    <content type="html"><![CDATA[<h1>Color Scheme: Solarized Plugin</h1>

<p>Let&rsquo;s start with an easy one. When working with Netbeans, I had the <a href="http://ethanschoonover.com/solarized">Solarized color scheme</a> installed. I was really used to this color scheme, and the first thing I did, was install it for Vim.</p>

<p>Installation is quite simple thanks to Pathogen: go to your <code>~/.vim/bundle</code> folder and <code>git clone git://github.com/altercation/vim-colors-solarized.git</code></p>

<p>Then edit your <code>~/.vimrc</code> configuration file. Add the following if you like working with a dark background:</p>

<p><code>vim
syntax enable
set background=dark
colorscheme solarized
</code></p>

<p>If you like the lighter background, then use this configuration:</p>

<p><code>vim
syntax enable
set background=light
colorscheme solarized
</code></p>

<p>If you want to reload your <code>~/.vimrc</code> configuration in your current Vim instance, hit <code>:</code> and type <code>so ~/.vimrc</code> + enter.</p>

<p><img class="center" src="/images/2013-09-24/screen-php-dark.png" title="Vim Solarized" ></p>

<p><!-- more -->
# Vim For IDE-people

This article is part of the series "Vim For IDE-people". The other articles in the list are:

1. [Basic Vim configuration and plugins](http://miljar.github.io/blog/2013/09/18/vim-for-ide-people-part-1/)
2. [Solarized color scheme](http://miljar.github.io/blog/2013/09/24/vim-for-ide-people-part-2/)
3. [File system explorer: NERDTree](http://miljar.github.io/blog/2013/11/08/vim-for-ide-people-part-3/)
4. [Syntax checking: Syntastic](http://miljar.github.io/blog/2013/11/19/vim-for-ide-people-part-4/)

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM for IDE-people - part 1]]></title>
    <link href="http://miljar.github.io/blog/2013/09/18/vim-for-ide-people-part-1/"/>
    <updated>2013-09-18T17:59:00+00:00</updated>
    <id>http://miljar.github.io/blog/2013/09/18/vim-for-ide-people-part-1</id>
    <content type="html"><![CDATA[<h1>Background</h1>

<p>My first encounter with Vim was back in the year 2000, my first year of university. It didn&rsquo;t really appeal to me. Why on Earth bother with all these keyboard shortcuts when we have a mouse to point with?</p>

<p>Fast forward to 2008, my first PHP conference. The cool kids were all using one or another Linux flavor, and Vim for editing their source code.</p>

<p>We&rsquo;re 2013 now, and while I&rsquo;ve been happy editing my source code in <a href="http://netbeans.org" title="Netbeans">Netbeans</a> for the past 8 years, I&rsquo;m not so happy with it anymore. Time to start learning and using Vim! (MacVim in my case)</p>

<h1>First things first: .vimrc</h1>

<p>Where to start? I&rsquo;m an IDE person and some things come with an IDE that don&rsquo;t come with an off-the-shelf Vim installation. Code completion, highlighting, folding, &hellip; Luckily these things can be added to your Vim installation by means of plugins.</p>

<p>Before we start adding plugins, there are some essentials first:</p>

<ul>
<li>I&rsquo;m not here to tell you how to install Vim. Just google it. I&rsquo;m using <a href="https://code.google.com/p/macvim/" title="MacVim">MacVim</a>.</li>
<li>Most, if not all, configuration of your Vim editor happens through a file called <code>.vimrc</code>. If it&rsquo;s not there yet, just create a file with that name in your home folder.</li>
<li>Plugins are installed in a special folder in your home folder: <code>~/.vim/bundle</code>, but more on that later.</li>
</ul>


<p>Here&rsquo;s the <code>.vimrc</code> config that I started with. It&rsquo;s quite basic for now, but I want to learn the basics first, and then gradually extend my knowledge.</p>

<p>``` vim
syntax on
filetype plugin indent on</p>

<p>set number          &ldquo; show line numbers
set lines=60        &rdquo; make the editor 60 lines tall
set columns=150     &ldquo; make the editor 150 columns wide</p>

<p>set tabstop=4       &ldquo; hitting tab produces 4 columns space
set shiftwidth=4    &rdquo; indent operations produce 4 columns space
set noexpandtab     &ldquo; don&rsquo;t replace a <tab> with <space>&lsquo;es
set softtabstop=4   &rdquo; amount of columns to use when hitting <tab> in insert mode</p>

<p>set history=1000    &ldquo; keep track of history for 1000 actions</p>

<p>set ruler          &ldquo; show cursorposition
set cursorline     &rdquo; highlight current line
set showcmd        &ldquo; display incomplete commands
set incsearch      &rdquo; incremental searching
set hlsearch       &ldquo; highlight searchresult</p>

<p>set scrolloff=4    &ldquo; keep at least 4 lines above or below the cursor</p>

<p>&ldquo; fileformat stuff
set fileformats=unix,dos
set encoding=utf-8
set fileencodings=utf-8,ucs-bom,cp1250,iso-8859-1
```</p>

<p>These settings won&rsquo;t do anything fancy. Just play with them and see what suits you best.</p>

<h1>Plugins</h1>

<p>Plugins extend the functionality of Vim far beyond its original capabilities. With the help of Vimscript, almost anything becomes possible with Vim.</p>

<p>The easiest way to install plugins&hellip; is with a plugin. Yes, <a href="https://github.com/tpope" title="Tim Pope on Github">Tim Pope</a> created a plugin, Pathogen, which allows you to install other plugins with almost zero configuration.</p>

<p>For installation of Pathogen, head over to <a href="https://github.com/tpope/vim-pathogen" title="Pathogen">https://github.com/tpope/vim-pathogen</a> and follow the instructions.</p>

<p>Add <code>execute pathogen#infect()</code> on top of your <code>.vimrc</code>, and voila! Now you&rsquo;re ready to install plugins.</p>

<h1>What&rsquo;s next?</h1>

<p>We now have our base Vim configuration: We have a <code>.vimrc</code> file in place that we can add configuration options to. And we are ready to install some plugins.</p>

<p>As I&rsquo;m learning and using Vim as we speak, I&rsquo;ll add more blog posts to tell you about my struggles, plugins I&rsquo;m using and other stuff I&rsquo;ve learned about Vim.</p>

<p>My goal is to stop using an IDE alltogether, and use Vim for all my source code editing. It won&rsquo;t be an easy task, but if others can manage it, then so can I. By blogging about my experiences, I hope I can help other people with their struggles.</p>

<p><strong>Update 20/09/2013</strong> It has come to my attention that the examples of supposedly lacking features are actually available right off the bat in Vim. They&rsquo;re just a bit deeper in the documentation. The things I should have mentioned were: git integration, auto-complete with the <code>tab</code> key, automatically adding closing angles, &hellip;</p>

<p><!-- more -->
# Vim For IDE-people

This article is part of the series "Vim For IDE-people". The other articles in the list are:

1. [Basic Vim configuration and plugins](http://miljar.github.io/blog/2013/09/18/vim-for-ide-people-part-1/)
2. [Solarized color scheme](http://miljar.github.io/blog/2013/09/24/vim-for-ide-people-part-2/)
3. [File system explorer: NERDTree](http://miljar.github.io/blog/2013/11/08/vim-for-ide-people-part-3/)
4. [Syntax checking: Syntastic](http://miljar.github.io/blog/2013/11/19/vim-for-ide-people-part-4/)

</p>
]]></content>
  </entry>
  
</feed>
