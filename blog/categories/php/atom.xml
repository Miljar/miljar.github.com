<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Miljar - Tom Van Herreweghe]]></title>
  <link href="http://miljar.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://miljar.github.io/"/>
  <updated>2013-12-20T14:12:01+00:00</updated>
  <id>http://miljar.github.io/</id>
  <author>
    <name><![CDATA[Tom Van Herreweghe]]></name>
    <email><![CDATA[tom@theanalogguy.be]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHPUnit: Testing The Constructor]]></title>
    <link href="http://miljar.github.io/blog/2013/12/20/phpunit-testing-the-constructor/"/>
    <updated>2013-12-20T16:00:00+00:00</updated>
    <id>http://miljar.github.io/blog/2013/12/20/phpunit-testing-the-constructor</id>
    <content type="html"><![CDATA[<p>In a previous blog post I explained how you could <a href="/2013/09/11/phpunit-mocking-the-system-under-test/">mock the system under test</a>. This allows you to easily verify if a given method calls other methods in the same class.</p>

<p>What if you wanted to verify this from the constructor?</p>

<h1>Normal classes</h1>

<p>``` php Example Car class
&lt;?php
class Car
{</p>

<pre><code>/**
 * @var int
 */
protected $doors;

/**
 * Class constructor
 *
 * @return void
 */
public function __construct($doors = 2)
{
    $this-&gt;setDoors($doors);
}

/**
 * Setter for the doors
 *
 * @param int $doors
 * @return void
 */
public function setDoors($doors)
{
    $this-&gt;doors = $doors;
}
</code></pre>

<p>}
```</p>

<p>The constructor is a <a href="http://www.php.net/manual/en/language.oop5.magic.php">magic function</a> in your class and is invoked when you create a new instance of said class. You don&rsquo;t explicitly call the constructor method.</p>

<p>Being a meticulous developer and trying to reach 100% unit test coverage, I explicitly want to verify if the constructor calls <code>setDoors</code>. One solution would be the following:</p>

<p>``` php Unit test for the Car class constructor
class CarTest extends PHPUnit_Framework_TestCase
{</p>

<pre><code>public function testConstructorCallsInternalMethods()
{
    $classname = 'Car';

    // Get mock, without the constructor being called
    $mock = $this-&gt;getMockBuilder($classname)
        -&gt;disableOriginalConstructor()
        -&gt;getMock();

    // set expectations for constructor calls
    $mock-&gt;expects($this-&gt;once())
        -&gt;method('setDoors')
        -&gt;with(
                $this-&gt;equalTo(4)
              );

    // now call the constructor
    $reflectedClass = new ReflectionClass($classname);
    $constructor = $reflectedClass-&gt;getConstructor();
    $constructor-&gt;invoke($mock, 4);
}
</code></pre>

<p>}
```</p>

<p>First thing I do, is create a mock object for the Car class, but I request that the constructor is not called with <code>disableOriginalConstructor</code>.
Next I set the expectations for my mock object: verify that the <code>setDoors</code> method is called with 4 as an argument.
Lastly, through <a href="http://php.net/language.oop5.reflection">reflection</a> I get a reflection method for the constructor, which I then invoke for the mock object and correct argument.</p>

<h1>Abstract classes</h1>

<p>For regular classes, the method described above seems straightforward. When dealing with <a href="http://www.php.net/manual/en/language.oop5.abstract.php">abstract classes</a>, mocking needs some more attention.</p>

<p><a href="https://github.com/sebastianbergmann/phpunit/">PHPUnit</a> provides us with a <code>getMockForAbstractClass</code> method, which conveniently creates a mock for an abstract class. What&rsquo;s in a name. Now where the regular <code>getMock</code> method doesn&rsquo;t mock any method unless you specify the ones you want, <code>getMockForAbstractClass</code> by default mocks the abstract methods so you can test the concrete methods.</p>

<p>So far things are logical. If you try the same approach as above for abstract classes, exchanging the <code>-&gt;getMock()</code> for <code>-&gt;getMockForAbstractClass()</code>, you end up with a disappointment. The mock tells you that the internal method wasn&rsquo;t called. Odd. Doing some var_dump-driven-development tells you that the method <em>is</em> called. However, it&rsquo;s not reflected in the mock.</p>

<p>How to fix?</p>

<p>``` php Unit test for abstract Car class
class CarTest extends PHPUnit_Framework_TestCase
{</p>

<pre><code>public function testConstructorCallsInternalMethods()
{
    $classname = 'Car';

    // Get mock, without the constructor being called
    $mock = $this-&gt;getMockBuilder($classname)
        -&gt;disableOriginalConstructor()
        -&gt;setMethods(array('setDoors'))
        -&gt;getMockForAbstractClass();

    // set expectations for constructor calls
    $mock-&gt;expects($this-&gt;once())
        -&gt;method('setDoors')
        -&gt;with(
                $this-&gt;equalTo(4)
              );

    // now call the constructor
    $reflectedClass = new ReflectionClass($classname);
    $constructor = $reflectedClass-&gt;getConstructor();
    $constructor-&gt;invoke($mock, 4);
}
</code></pre>

<p>}
```</p>

<p>Tadaa! For an abstract class, we explicitly have to define the list of methods we want to stub.</p>

<p>Come to think of it, this is actually logical behavior, as this is how regular mocking works. What&rsquo;s not logical, is that it works for normal classes without the list of methods you want to stub. So just to be on the safe side (and to have some kind of pattern), just always provide a list of methods. At least, that&rsquo;s what I&rsquo;m going to do from now on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPUnit: Mocking the System Under Test]]></title>
    <link href="http://miljar.github.io/blog/2013/09/11/phpunit-mocking-the-system-under-test/"/>
    <updated>2013-09-11T17:55:00+00:00</updated>
    <id>http://miljar.github.io/blog/2013/09/11/phpunit-mocking-the-system-under-test</id>
    <content type="html"><![CDATA[<p>When unit testing a class, at one point you&rsquo;ll have to check if some functionality in a dependency is triggered. Usually this is done by replacing the dependency with a mock object. A well designed system let&rsquo;s you inject dependencies in your objects, thus allowing for easier unit testing.</p>

<p>``` php Mocking dependencies
&lt;?php
class UserService
{
  proteced $mailerService;</p>

<pre><code>public function getMailerService()
{
    if (empty($this-&gt;mailerService)) {
        throw new \RuntimeException('No mailer service set');
    }

    return $this-&gt;mailerService;
}

public function setMailerService(MailerInterface $service)
{
    $this-&gt;mailerService = $service;

    return $this;
}

public function registerUser($userObject)
{
    // â€¦

    $mailerService = $this-&gt;getMailerService();
    $mailerService-&gt;sendMail('registration', $userObject);
}
</code></pre>

<p>}</p>

<p>class UserServiceTest extends PHPUnit_Framework_TestCase
{</p>

<pre><code>public function testRegisteringUserTriggersMail()
{
    $userObject = new User('Tom', 'tom@example.com');

    $mailerMock = $this-&gt;getMock('My\Namespace\MailerService');
    $mailerMock-&gt;expects($this-&gt;once())
        -&gt;method('sendMail')
        -&gt;with(
            $this-&gt;equalTo('registration'),
            $this-&gt;equalTo($userObject)
        );

    $userService = new UserService();
    $userService-&gt;setMailerService($mailerMock);

    $userService-&gt;registerUser($userObject);
}
</code></pre>

<p>}
```</p>

<p>The example above tests if the mailer service is triggered when the registerUser() method is called. The System Under Test (SUT) here is the UserService, and the mock object is the MailerService.</p>

<p>But what if you wanted to mock one or more methods in the SUT itself? Like the example below:</p>

<p>``` php Example with internal dependencies
&lt;?php
class UserService
{</p>

<pre><code>// ...

public function registerUser($userObject)
{
    $this-&gt;saveUser($userObject);

    $mailerService = $this-&gt;getMailerService();
    $mailerService-&gt;sendMail('registration', $userObject);
}

public function saveUser($userObject)
{
    // ...
}
</code></pre>

<p>}
```</p>

<p>This implementation of the UserService has 2 separate methods: one for saving a User object and a convenience method registerUser which calls saveUser and then sends out a mail.</p>

<p>I&rsquo;ve sometimes wondered how you can make sure that the registerUser method calls the other method without actually covering the implementation of it. Let me rephrase that: &ldquo;How can you mock a method in the SUT?&rdquo;</p>

<p>Of course the answer was quite simple, but it only hit me after a while: Let the SUT become the mock!</p>

<p>In PHPUnit, it&rsquo;s possible to create a <em>partial mock</em>. That&rsquo;s a mock with not all its methods mocked. When you invoke a method of a partial mock that wasn&rsquo;t mocked, then the original method is called. Here&rsquo;s an example in a unit test:</p>

<p>``` php Mocking the SUT
&lt;?php
class UserServiceTest extends PHPUnit_Framework_TestCase
{</p>

<pre><code>public function testRegisteringUserCallsSaveUserMethod()
{
    $userObject = new User('Tom', 'tom@example.com');

    $mock = $this-&gt;getMock('UserService', array('saveUser'));
    $mock-&gt;expects($this-&gt;once())
        -&gt;method('saveUser')
        -&gt;with($this-&gt;equalTo($userObject));

    $mock-&gt;registerUser($userObject);
}
</code></pre>

<p>}
```</p>

<p>So first the SUT is mocked, with expectations for our saveUser method. Then on that mock we call the registerUser method, which is not mocked.</p>

<p>If you generate a code coverage report from that test, then only the registerUser method will be covered, which is exactly what I wanted.</p>
]]></content>
  </entry>
  
</feed>
