<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Miljar - Tom Van Herreweghe]]></title>
  <link href="http://miljar.github.io/atom.xml" rel="self"/>
  <link href="http://miljar.github.io/"/>
  <updated>2013-09-20T06:52:05+00:00</updated>
  <id>http://miljar.github.io/</id>
  <author>
    <name><![CDATA[Tom Van Herreweghe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VIM for IDE-people - part 1]]></title>
    <link href="http://miljar.github.io/blog/2013/09/18/vim-for-ide-people-part-1/"/>
    <updated>2013-09-18T17:59:00+00:00</updated>
    <id>http://miljar.github.io/blog/2013/09/18/vim-for-ide-people-part-1</id>
    <content type="html"><![CDATA[<h1>Background</h1>

<p>My first encounter with Vim was back in the year 2000, my first year of university. It didn&rsquo;t really appeal to me. Why on Earth bother with all these keyboard shortcuts when we have a mouse to point with?</p>

<p>Fast forward to 2008, my first PHP conference. The cool kids were all using one or another Linux flavor, and Vim for editing their source code.</p>

<p>We&rsquo;re 2013 now, and while I&rsquo;ve been happy editing my source code in <a href="http://netbeans.org" title="Netbeans">Netbeans</a> for the past 8 years, I&rsquo;m not so happy with it anymore. Time to start learning and using Vim! (MacVim in my case)</p>

<h1>First things first: .vimrc</h1>

<p>Where to start? I&rsquo;m an IDE person and some things come with an IDE that don&rsquo;t come with an off-the-shelf Vim installation. Code completion, highlighting, folding, &hellip; Luckily these things can be added to your Vim installation by means of plugins.</p>

<p>Before we start adding plugins, there are some essentials first:</p>

<ul>
<li>I&rsquo;m not here to tell you how to install Vim. Just google it. I&rsquo;m using <a href="https://code.google.com/p/macvim/" title="MacVim">MacVim</a>.</li>
<li>Most, if not all, configuration of your Vim editor happens through a file called <code>.vimrc</code>. If it&rsquo;s not there yet, just create a file with that name in your home folder.</li>
<li>Plugins are installed in a special folder in your home folder: <code>~/.vim/bundle</code>, but more on that later.</li>
</ul>


<p>Here&rsquo;s the <code>.vimrc</code> config that I started with. It&rsquo;s quite basic for now, but I want to learn the basics first, and then gradually extend my knowledge.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">syntax</span> <span class="k">on</span>
</span><span class='line'><span class="k">filetype</span> plugin indent <span class="k">on</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="k">number</span>          <span class="c">&quot; show line numbers</span>
</span><span class='line'><span class="k">set</span> <span class="nb">lines</span><span class="p">=</span><span class="m">60</span>        <span class="c">&quot; make the editor 60 lines tall</span>
</span><span class='line'><span class="k">set</span> <span class="nb">columns</span><span class="p">=</span><span class="m">150</span>     <span class="c">&quot; make the editor 150 columns wide</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">4</span>       <span class="c">&quot; hitting tab produces 4 columns space</span>
</span><span class='line'><span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">4</span>    <span class="c">&quot; indent operations produce 4 columns space</span>
</span><span class='line'><span class="k">set</span> <span class="nb">noexpandtab</span>     <span class="c">&quot; don&#39;t replace a &lt;tab&gt; with &lt;space&gt;&#39;es</span>
</span><span class='line'><span class="k">set</span> <span class="nb">softtabstop</span><span class="p">=</span><span class="m">4</span>   <span class="c">&quot; amount of columns to use when hitting &lt;tab&gt; in insert mode</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="k">history</span><span class="p">=</span><span class="m">1000</span>    <span class="c">&quot; keep track of history for 1000 actions</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">ruler</span>          <span class="c">&quot; show cursorposition</span>
</span><span class='line'><span class="k">set</span> <span class="nb">cursorline</span>     <span class="c">&quot; highlight current line</span>
</span><span class='line'><span class="k">set</span> <span class="nb">showcmd</span>        <span class="c">&quot; display incomplete commands</span>
</span><span class='line'><span class="k">set</span> <span class="nb">incsearch</span>      <span class="c">&quot; incremental searching</span>
</span><span class='line'><span class="k">set</span> <span class="nb">hlsearch</span>       <span class="c">&quot; highlight searchresult</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">scrolloff</span><span class="p">=</span><span class="m">4</span>    <span class="c">&quot; keep at least 4 lines above or below the cursor</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; fileformat stuff</span>
</span><span class='line'><span class="k">set</span> <span class="nb">fileformats</span><span class="p">=</span>unix<span class="p">,</span>dos
</span><span class='line'><span class="k">set</span> <span class="nb">encoding</span><span class="p">=</span>utf<span class="m">-8</span>
</span><span class='line'><span class="k">set</span> <span class="nb">fileencodings</span><span class="p">=</span>utf<span class="m">-8</span><span class="p">,</span>ucs<span class="p">-</span>bom<span class="p">,</span>cp1250<span class="p">,</span>iso<span class="m">-8859-1</span>
</span></code></pre></td></tr></table></div></figure>


<p>These settings won&rsquo;t do anything fancy. Just play with them and see what suits you best.</p>

<h1>Plugins</h1>

<p>Plugins extend the functionality of Vim far beyond its original capabilities. With the help of Vimscript, almost anything becomes possible with Vim.</p>

<p>The easiest way to install plugins&hellip; is with a plugin. Yes, <a href="https://github.com/tpope" title="Tim Pope on Github">Tim Pope</a> created a plugin, Pathogen, which allows you to install other plugins with almost zero configuration.</p>

<p>For installation of Pathogen, head over to <a href="https://github.com/tpope/vim-pathogen" title="Pathogen">https://github.com/tpope/vim-pathogen</a> and follow the instructions.</p>

<p>Add <code>execute pathogen#infect()</code> on top of your <code>.vimrc</code>, and voila! Now you&rsquo;re ready to install plugins.</p>

<h1>What&rsquo;s next?</h1>

<p>We now have our base Vim configuration: We have a <code>.vimrc</code> file in place that we can add configuration options to. And we are ready to install some plugins.</p>

<p>As I&rsquo;m learning and using Vim as we speak, I&rsquo;ll add more blog posts to tell you about my struggles, plugins I&rsquo;m using and other stuff I&rsquo;ve learned about Vim.</p>

<p>My goal is to stop using an IDE alltogether, and use Vim for all my source code editing. It won&rsquo;t be an easy task, but if others can manage it, then so can I. By blogging about my experiences, I hope I can help other people with their struggles.</p>

<p><strong>Update 20/09/2013</strong> It has come to my attention that the examples of supposedly lacking features are actually available right off the bat in Vim. They&rsquo;re just a bit deeper in the documentation. The things I should have mentioned were: git integration, auto-complete with the <code>tab</code> key, automatically adding closing angles, &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPUnit: Mocking the System Under Test]]></title>
    <link href="http://miljar.github.io/blog/2013/09/11/phpunit-mocking-the-system-under-test/"/>
    <updated>2013-09-11T17:55:00+00:00</updated>
    <id>http://miljar.github.io/blog/2013/09/11/phpunit-mocking-the-system-under-test</id>
    <content type="html"><![CDATA[<p>When unit testing a class, at one point you&rsquo;ll have to check if some functionality in a dependency is triggered. Usually this is done by replacing the dependency with a mock object. A well designed system let&rsquo;s you inject dependencies in your objects, thus allowing for easier unit testing.</p>

<figure class='code'><figcaption><span>Mocking dependencies</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserService</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">proteced</span> <span class="nv">$mailerService</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getMailerService</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailerService</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nx">\RuntimeException</span><span class="p">(</span><span class="s1">&#39;No mailer service set&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailerService</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">setMailerService</span><span class="p">(</span><span class="nx">MailerInterface</span> <span class="nv">$service</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mailerService</span> <span class="o">=</span> <span class="nv">$service</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">registerUser</span><span class="p">(</span><span class="nv">$userObject</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// …</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$mailerService</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getMailerService</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$mailerService</span><span class="o">-&gt;</span><span class="na">sendMail</span><span class="p">(</span><span class="s1">&#39;registration&#39;</span><span class="p">,</span> <span class="nv">$userObject</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserServiceTest</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testRegisteringUserTriggersMail</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$userObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="s1">&#39;Tom&#39;</span><span class="p">,</span> <span class="s1">&#39;tom@example.com&#39;</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="nv">$mailerMock</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getMock</span><span class="p">(</span><span class="s1">&#39;My\Namespace\MailerService&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$mailerMock</span><span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">once</span><span class="p">())</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;sendMail&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">with</span><span class="p">(</span>
</span><span class='line'>              <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">equalTo</span><span class="p">(</span><span class="s1">&#39;registration&#39;</span><span class="p">),</span>
</span><span class='line'>              <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">equalTo</span><span class="p">(</span><span class="nv">$userObject</span><span class="p">)</span>
</span><span class='line'>          <span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>      <span class="nv">$userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$userService</span><span class="o">-&gt;</span><span class="na">setMailerService</span><span class="p">(</span><span class="nv">$mailerMock</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$userService</span><span class="o">-&gt;</span><span class="na">registerUser</span><span class="p">(</span><span class="nv">$userObject</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example above tests if the mailer service is triggered when the registerUser() method is called. The System Under Test (SUT) here is the UserService, and the mock object is the MailerService.</p>

<p>But what if you wanted to mock one or more methods in the SUT itself? Like the example below:</p>

<figure class='code'><figcaption><span>Example with internal dependencies</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserService</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">registerUser</span><span class="p">(</span><span class="nv">$userObject</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">saveUser</span><span class="p">(</span><span class="nv">$userObject</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$mailerService</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getMailerService</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$mailerService</span><span class="o">-&gt;</span><span class="na">sendMail</span><span class="p">(</span><span class="s1">&#39;registration&#39;</span><span class="p">,</span> <span class="nv">$userObject</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">saveUser</span><span class="p">(</span><span class="nv">$userObject</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation of the UserService has 2 separate methods: one for saving a User object and a convenience method registerUser which calls saveUser and then sends out a mail.</p>

<p>I&rsquo;ve sometimes wondered how you can make sure that the registerUser method calls the other method without actually covering the implementation of it. Let me rephrase that: &ldquo;How can you mock a method in the SUT?&rdquo;</p>

<p>Of course the answer was quite simple, but it only hit me after a while: Let the SUT become the mock!</p>

<p>In PHPUnit, it&rsquo;s possible to create a <em>partial mock</em>. That&rsquo;s a mock with not all its methods mocked. When you invoke a method of a partial mock that wasn&rsquo;t mocked, then the original method is called. Here&rsquo;s an example in a unit test:</p>

<figure class='code'><figcaption><span>Mocking the SUT</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserServiceTest</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">testRegisteringUserCallsSaveUserMethod</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nv">$userObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="s1">&#39;Tom&#39;</span><span class="p">,</span> <span class="s1">&#39;tom@example.com&#39;</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="nv">$mock</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getMock</span><span class="p">(</span><span class="s1">&#39;UserService&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;saveUser&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$mock</span><span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">once</span><span class="p">())</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">method</span><span class="p">(</span><span class="s1">&#39;saveUser&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">with</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">equalTo</span><span class="p">(</span><span class="nv">$userObject</span><span class="p">));</span>
</span><span class='line'>          
</span><span class='line'>      <span class="nv">$mock</span><span class="o">-&gt;</span><span class="na">registerUser</span><span class="p">(</span><span class="nv">$userObject</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So first the SUT is mocked, with expectations for our saveUser method. Then on that mock we call the registerUser method, which is not mocked.</p>

<p>If you generate a code coverage report from that test, then only the registerUser method will be covered, which is exactly what I wanted.</p>
]]></content>
  </entry>
  
</feed>
